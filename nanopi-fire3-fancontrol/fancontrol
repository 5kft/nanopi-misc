#!/usr/bin/env python3

import time

class FanController:

    PWM_CHIP        = "/sys/class/pwm/pwmchip0/"
    PWM_LINE        = "pwm1/"
    PWM_EXPORT      = "export"
    PWM_ENABLE      = "enable"

    PWM_PERIOD      = "period"
    PWM_DUTY_CYCLE  = "duty_cycle"

    f_duty_cycle    = None

    prev_duty_cycle = None


    def set_duty_cycle(self, duty_cycle):
        value = int(duty_cycle)

        if (value != self.prev_duty_cycle):
            self.f_duty_cycle.write('%d00000\n' % int(value))
            self.f_duty_cycle.flush()

            self.prev_duty_cycle = value


    def __init__(self):
        self.prev_duty_cycle = -1

        try:
            with open(self.PWM_CHIP + self.PWM_EXPORT, 'w') as f:
                f.write('1\n')
                f.flush()

        except:
            pass

        with open(self.PWM_CHIP + self.PWM_LINE + self.PWM_PERIOD, 'w') as f:
            f.write('10000000\n')
            f.flush()

        self.f_duty_cycle = open(self.PWM_CHIP + self.PWM_LINE + self.PWM_DUTY_CYCLE, 'w')

        # kick-start the fan at 75%
        self.set_duty_cycle(75)

        with open(self.PWM_CHIP + self.PWM_LINE + self.PWM_ENABLE, 'w') as f:
            f.write('1\n')
            f.flush()

        time.sleep(2)


class TemperatureInterface:

    TEMP_VALUE = "/sys/class/thermal/thermal_zone0/temp"

    def read_temperature(self):
        with open(self.TEMP_VALUE) as f:
            return int(int(f.read()) / 1000)


def temp_to_duty_cycle(ti):

    TEMP_MIN    = 35
    TEMP_MAX    = 80

    FAN_MIN     = 25
    FAN_MAX     = 100

    value = int((((FAN_MAX - FAN_MIN) * (ti.read_temperature() - TEMP_MIN)) / (TEMP_MAX - TEMP_MIN)) + FAN_MIN)

    if value > FAN_MAX:
        value = FAN_MAX

    elif value < FAN_MIN:
        value = FAN_MIN

    return value


fan = FanController()
ti  = TemperatureInterface()

while True:
    fan.set_duty_cycle(temp_to_duty_cycle(ti))

    time.sleep(5)

